/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
	? (Without<T, U> & U) | (Without<U, T> & T)
	: T | U;
type OneOf<T extends any[]> = T extends [infer Only]
	? Only
	: T extends [infer A, infer B, ...infer Rest]
	? OneOf<[XOR<A, B>, ...Rest]>
	: never;

export interface paths {
	"/robots.txt": {
		get: operations["robots_txt"];
	};
	"/scim/v1/Sync": {
		get: operations["scim_sync_get"];
		post: operations["scim_sync_post"];
	};
	"/status": {
		/**
		 * Status endpoint used for health checks, returns true when the server is up.
		 * @description Status endpoint used for health checks, returns true when the server is up.
		 */
		get: operations["status"];
	};
	"/ui/images/oauth2/{rs_name}": {
		/**
		 * This returns the image for the OAuth2 Resource Server if the user has permissions
		 * @description This returns the image for the OAuth2 Resource Server if the user has permissions
		 */
		get: operations["oauth2_image_get"];
	};
	"/v1/account/{id}/_radius/_token": {
		get: operations["account_id_radius_token_get"];
		post: operations["account_id_radius_token_post"];
	};
	"/v1/account/{id}/_ssh_pubkeys": {
		/** @deprecated */
		get: operations["account_id_ssh_pubkeys_get"];
	};
	"/v1/account/{id}/_ssh_pubkeys/{tag}": {
		get: operations["account_id_ssh_pubkeys_tag_get"];
	};
	"/v1/account/{id}/_unix": {
		/**
		 * Expects an `AccountUnixExtend` object
		 * @description Expects an `AccountUnixExtend` object
		 */
		post: operations["account_id_unix_post"];
	};
	"/v1/account/{id}/_unix/_auth": {
		post: operations["account_id_unix_auth_post"];
	};
	"/v1/account/{id}/_unix/_token": {
		post: operations["account_id_unix_token"];
	};
	"/v1/account/{id}/_user_auth_token": {
		get: operations["account_id_user_auth_token_get"];
	};
	"/v1/account/{id}/_user_auth_token/{token_id}": {
		get: operations["account_user_auth_token_delete"];
	};
	"/v1/auth": {
		post: operations["auth"];
	};
	"/v1/auth/valid": {
		get: operations["auth_valid"];
	};
	"/v1/credential/_cancel": {
		post: operations["credential_update_cancel"];
	};
	"/v1/credential/_commit": {
		post: operations["credential_update_commit"];
	};
	"/v1/credential/_exchange_intent": {
		get: operations["credential_update_exchange_intent"];
	};
	"/v1/credential/_status": {
		get: operations["credential_update_status"];
	};
	"/v1/credential/_update": {
		post: operations["credential_update_update"];
	};
	"/v1/debug/ipinfo": {
		get: operations["debug_ipinfo"];
	};
	"/v1/domain": {
		get: operations["domain_get"];
	};
	"/v1/domain/_attr/{attr}": {
		get: operations["domain_attr_get"];
		put: operations["domain_attr_put"];
		delete: operations["domain_attr_delete"];
	};
	"/v1/group": {
		/**
		 * Returns all groups visible  to the user
		 * @description Returns all groups visible  to the user
		 */
		get: operations["group_get"];
	};
	"/v1/group/{id}": {
		get: operations["group_id_get"];
		post: operations["group_post"];
		delete: operations["group_id_delete"];
	};
	"/v1/group/{id}/_attr/{attr}": {
		get: operations["group_id_attr_get"];
		put: operations["group_id_attr_put"];
		post: operations["group_id_attr_post"];
		delete: operations["group_id_attr_delete"];
	};
	"/v1/group/{id}/_unix": {
		put: operations["group_id_unix_post"];
	};
	"/v1/group/{id}/_unix/_token": {
		get: operations["group_id_unix_token_get"];
	};
	"/v1/logout": {
		post: operations["logout"];
	};
	"/v1/oauth2": {
		/**
		 * Lists all the OAuth2 Resource Servers
		 * @description Lists all the OAuth2 Resource Servers
		 */
		get: operations["oauth2_get"];
	};
	"/v1/oauth2/_public": {
		post: operations["oauth2_public_post"];
	};
	"/v1/oauth2/basic": {
		post: operations["oauth2_basic_post"];
	};
	"/v1/oauth2/{rs_name}": {
		/**
		 * Get the details of a given OAuth2 Resource Server.
		 * @description Get the details of a given OAuth2 Resource Server.
		 */
		get: operations["oauth2_id_get"];
		/**
		 * Delete an OAuth2 Resource Server
		 * @description Delete an OAuth2 Resource Server
		 */
		delete: operations["oauth2_id_delete"];
		/**
		 * Modify an OAuth2 Resource Server
		 * @description Modify an OAuth2 Resource Server
		 */
		patch: operations["oauth2_id_patch"];
	};
	"/v1/oauth2/{rs_name}/_basic_secret": {
		/**
		 * Get the basic secret for a given OAuth2 Resource Server. This is used for authentication.
		 * @description Get the basic secret for a given OAuth2 Resource Server. This is used for authentication.
		 */
		get: operations["oauth2_id_get_basic_secret"];
	};
	"/v1/oauth2/{rs_name}/_image": {
		/**
		 * API endpoint for creating/replacing the image associated with an OAuth2 Resource Server.
		 * @description API endpoint for creating/replacing the image associated with an OAuth2 Resource Server.
		 *
		 * It requires a multipart form with the image file, and the content type must be one of the
		 * [VALID_IMAGE_UPLOAD_CONTENT_TYPES].
		 */
		post: operations["oauth2_id_image_post"];
		delete: operations["oauth2_id_image_delete"];
	};
	"/v1/oauth2/{rs_name}/_scopemap/{group}": {
		delete: operations["oauth2_id_scopemap_delete"];
		/**
		 * Modify the scope map for a given OAuth2 Resource Server
		 * @description Modify the scope map for a given OAuth2 Resource Server
		 */
		patch: operations["oauth2_id_scopemap_post"];
	};
	"/v1/oauth2/{rs_name}/_sup_scopemap/{group}": {
		/**
		 * Create a supplemental scope map for a given OAuth2 Resource Server
		 * @description Create a supplemental scope map for a given OAuth2 Resource Server
		 */
		post: operations["oauth2_id_sup_scopemap_post"];
		delete: operations["oauth2_id_sup_scopemap_delete"];
	};
	"/v1/person": {
		get: operations["person_get"];
		/**
		 * Expects the following fields in the attrs field of the req: [name, displayname]
		 * @description Expects the following fields in the attrs field of the req: [name, displayname]
		 */
		post: operations["person_post"];
	};
	"/v1/person/{id}": {
		get: operations["person_id_get"];
		delete: operations["person_id_delete"];
		patch: operations["person_id_patch"];
	};
	"/v1/person/{id}/_attr/{attr}": {
		get: operations["person_id_get_attr"];
		put: operations["person_id_put_attr"];
		post: operations["person_id_post_attr"];
		delete: operations["person_id_delete_attr"];
	};
	"/v1/person/{id}/_credential/_status": {
		delete: operations["person_get_id_credential_status"];
	};
	"/v1/person/{id}/_credential/_update": {
		get: operations["person_id_credential_update_get"];
	};
	"/v1/person/{id}/_credential/_update_intent": {
		get: operations["person_id_credential_update_intent_get"];
	};
	"/v1/person/{id}/_credential/_update_intent/?ttl={ttl}": {
		get: operations["person_id_credential_update_intent_ttl_get"];
	};
	"/v1/person/{id}/_identify/_user": {
		post: operations["person_identify_user_post"];
	};
	"/v1/person/{id}/_radius": {
		/**
		 * Get and return a single str
		 * @description Get and return a single str
		 */
		get: operations["person_id_radius_get"];
		post: operations["person_id_radius_post"];
		delete: operations["person_id_radius_delete"];
	};
	"/v1/person/{id}/_radius/_token": {
		get: operations["person_id_radius_token_get"];
	};
	"/v1/person/{id}/_ssh_pubkeys": {
		get: operations["person_id_ssh_pubkeys_get"];
		post: operations["person_id_ssh_pubkeys_post"];
	};
	"/v1/person/{id}/_ssh_pubkeys/{tag}": {
		get: operations["person_id_ssh_pubkeys_tag_get"];
		delete: operations["person_id_ssh_pubkeys_tag_delete"];
	};
	"/v1/person/{id}/_unix/_credential": {
		post: operations["person_id_unix_credential_put"];
		delete: operations["person_id_unix_credential_delete"];
	};
	"/v1/raw/create": {
		/**
		 * Raw request to the system, be warned this can be dangerous!
		 * @description Raw request to the system, be warned this can be dangerous!
		 */
		post: operations["raw_create"];
	};
	"/v1/raw/delete": {
		/**
		 * Raw request to the system, be warned this can be dangerous!
		 * @description Raw request to the system, be warned this can be dangerous!
		 */
		post: operations["raw_delete"];
	};
	"/v1/raw/modify": {
		/**
		 * Raw request to the system, be warned this can be dangerous!
		 * @description Raw request to the system, be warned this can be dangerous!
		 */
		post: operations["raw_modify"];
	};
	"/v1/raw/search": {
		/**
		 * Raw request to the system, be warned this can be dangerous!
		 * @description Raw request to the system, be warned this can be dangerous!
		 */
		post: operations["raw_search"];
	};
	"/v1/reauth": {
		post: operations["reauth"];
	};
	"/v1/recycle_bin": {
		post: operations["recycle_bin_get"];
	};
	"/v1/recycle_bin/{id}": {
		get: operations["recycle_bin_id_get"];
	};
	"/v1/recycle_bin/{id}/_revive": {
		post: operations["recycle_bin_revive_id_post"];
	};
	"/v1/schema": {
		get: operations["schema_get"];
	};
	"/v1/schema/attributetype": {
		get: operations["schema_attributetype_get"];
	};
	"/v1/schema/attributetype/{id}": {
		get: operations["schema_attributetype_get_id"];
	};
	"/v1/schema/classtype": {
		get: operations["schema_classtype_get"];
	};
	"/v1/schema/classtype/{id}": {
		get: operations["schema_classtype_get_id"];
	};
	"/v1/self": {
		get: operations["whoami"];
	};
	"/v1/self/_applinks": {
		/**
		 * Returns your OAuth2 app links for the Web UI
		 * @description Returns your OAuth2 app links for the Web UI
		 */
		get: operations["applinks_get"];
	};
	"/v1/self/_uat": {
		get: operations["whoami_uat"];
	};
	"/v1/service_account": {
		get: operations["service_account_get"];
		post: operations["service_account_post"];
	};
	"/v1/service_account/{id}": {
		get: operations["service_account_id_get"];
		delete: operations["service_account_id_delete"];
		patch: operations["service_account_id_patch"];
	};
	"/v1/service_account/{id}/_attr/{attr}": {
		get: operations["service_account_id_get_attr"];
		put: operations["service_account_id_put_attr"];
		post: operations["service_account_id_post_attr"];
		delete: operations["service_account_id_delete_attr"];
	};
	"/v1/service_account/{id}/_credential/_generate": {
		get: operations["service_account_credential_generate"];
	};
	"/v1/service_account/{id}/_credential/_status": {
		get: operations["service_account_id_credential_status_get"];
	};
	"/v1/service_account/{id}/_into_person": {
		/**
		 * Due to how the migrations work in 6 -> 7, we can accidentally
		 * @deprecated
		 * @description Due to how the migrations work in 6 -> 7, we can accidentally
		 * mark "accounts" as service accounts when they are persons. This
		 * allows migrating them to the person type due to its similarities.
		 *
		 * In the future this will be REMOVED!
		 */
		post: operations["service_account_into_person"];
	};
	"/v1/service_account/{id}/_spi_token": {
		get: operations["service_account_api_token_get"];
		post: operations["service_account_api_token_post"];
	};
	"/v1/service_account/{id}/_spi_token/{token_id}": {
		delete: operations["service_account_api_token_delete"];
	};
	"/v1/service_account/{id}/_ssh_pubkeys": {
		get: operations["service_account_id_ssh_pubkeys_get"];
		post: operations["service_account_id_ssh_pubkeys_post"];
	};
	"/v1/service_account/{id}/_ssh_pubkeys/{tag}": {
		get: operations["service_account_id_ssh_pubkeys_tag_get"];
		delete: operations["service_account_id_ssh_pubkeys_tag_delete"];
	};
	"/v1/service_account/{id}/_unix": {
		post: operations["service_account_id_unix_post"];
	};
	"/v1/sync_account": {
		/**
		 * Get all? the sync accounts.
		 * @description Get all? the sync accounts.
		 */
		get: operations["sync_account_get"];
		post: operations["sync_account_post"];
	};
	"/v1/sync_account/{id}": {
		/**
		 * Get the details of a sync account
		 * @description Get the details of a sync account
		 */
		get: operations["sync_account_id_get"];
		/**
		 * Modify a sync account in-place
		 * @description Modify a sync account in-place
		 */
		patch: operations["sync_account_id_patch"];
	};
	"/v1/sync_account/{id}/_attr/{attr}": {
		get: operations["sync_account_id_attr_get"];
		post: operations["sync_account_id_attr_put"];
	};
	"/v1/sync_account/{id}/_finalise": {
		get: operations["sync_account_id_finalise_get"];
	};
	"/v1/sync_account/{id}/_sync_token": {
		post: operations["sync_account_token_post"];
		delete: operations["sync_account_token_delete"];
	};
	"/v1/sync_account/{id}/_terminate": {
		get: operations["sync_account_id_terminate_get"];
	};
	"/v1/system": {
		get: operations["system_get"];
	};
	"/v1/system/_attr/{attr}": {
		get: operations["system_attr_get"];
		put: operations["system_attr_put"];
		post: operations["system_attr_post"];
		delete: operations["system_attr_delete"];
	};
}

export type webhooks = Record<string, never>;

export interface components {
	schemas: {
		AccountUnixExtend: {
			/** Format: int32 */
			gidnumber?: number | null;
			/** @description The internal attribute is "loginshell" but we use shell in the API currently */
			shell?: string | null;
		};
		ApiToken: {
			/** Format: uuid */
			account_id: string;
			/** Format: uuid */
			token_id: string;
			label: string;
			/** Format: date-time */
			expiry?: string | null;
			/** Format: date-time */
			issued_at: string;
			purpose?: components["schemas"]["ApiTokenPurpose"];
		};
		ApiTokenGenerate: {
			label: string;
			/** Format: date-time */
			expiry?: string | null;
			read_write: boolean;
		};
		/** @enum {string} */
		ApiTokenPurpose: "readonly" | "readwrite" | "synchronise";
		AuthAllowed:
			| "anonymous"
			| "backupcode"
			| "password"
			| "totp"
			| {
					securitykey: components["schemas"]["RequestChallengeResponse"];
			  }
			| {
					passkey: components["schemas"]["RequestChallengeResponse"];
			  };
		AuthCredential:
			| "anonymous"
			| {
					password: string;
			  }
			| {
					/** Format: int32 */
					totp: number;
			  }
			| {
					securitykey: components["schemas"]["PublicKeyCredential"];
			  }
			| {
					backupcode: string;
			  }
			| {
					passkey: components["schemas"]["PublicKeyCredential"];
			  };
		/** @enum {string} */
		AuthIssueSession: "token";
		/** @enum {string} */
		AuthMech: "anonymous" | "password" | "passwordmfa" | "passkey";
		AuthRequest: {
			step: components["schemas"]["AuthStep"];
		};
		AuthResponse: {
			/** Format: uuid */
			sessionid: string;
			state: components["schemas"]["AuthState"];
		};
		AuthState: OneOf<
			[
				{
					/** @description You need to select how you want to talk to me. */
					choose: components["schemas"]["AuthMech"][];
				},
				{
					/** @description Continue to auth, allowed mechanisms/challenges listed. */
					continue: components["schemas"]["AuthAllowed"][];
				},
				{
					/** @description Something was bad, your session is terminated and no cookie. */
					denied: string;
				},
				{
					/** @description Everything is good, your bearer token has been issued and is within the result. */
					success: string;
				}
			]
		>;
		AuthStep: OneOf<
			[
				{
					/** @description "I want to authenticate with this username" */
					init: string;
				},
				{
					/**
					 * @description A new way to issue sessions. Doing this as a new init type
					 * to prevent breaking existing clients. Allows requesting of the type
					 * of session that will be issued at the end if successful.
					 */
					init2: {
						username: string;
						issue: components["schemas"]["AuthIssueSession"];
						/** @description If true, the session will have r/w access. */
						privileged?: boolean;
					};
				},
				{
					begin: components["schemas"]["AuthMech"];
				},
				{
					cred: components["schemas"]["AuthCredential"];
				}
			]
		>;
		BTreeSet: Record<string, never>;
		BackupCodesView: {
			backup_codes: string[];
		};
		Base64UrlSafeData: Record<string, never>;
		CUExtPortal: OneOf<
			[
				"None",
				"Hidden",
				{
					/** Format: uri */
					Some: string;
				}
			]
		>;
		CUIntentToken: {
			token: string;
		};
		CURegState:
			| "None"
			| {
					TotpCheck: components["schemas"]["TotpSecret"];
			  }
			| "TotpTryAgain"
			| "TotpInvalidSha1"
			| {
					BackupCodes: string[];
			  }
			| {
					Passkey: components["schemas"]["CreationChallengeResponse"];
			  }
			| {
					AttestedPasskey: components["schemas"]["CreationChallengeResponse"];
			  };
		CUSessionToken: {
			token: string;
		};
		CUStatus: {
			spn: string;
			displayname: string;
			ext_cred_portal: components["schemas"]["CUExtPortal"];
			mfaregstate: components["schemas"]["CURegState"];
			can_commit: boolean;
			warnings: components["schemas"]["CURegWarning"][];
			primary?: components["schemas"]["CredentialDetail"] | null;
			primary_state: components["schemas"]["CUCredState"];
			passkeys: components["schemas"]["PasskeyDetail"][];
			passkeys_state: components["schemas"]["CUCredState"];
			attested_passkeys: components["schemas"]["PasskeyDetail"][];
			attested_passkeys_state: components["schemas"]["CUCredState"];
			attested_passkeys_allowed_devices: string[];
		};
		Claim: {
			name: string;
			uuid: string;
		};
		CreateRequest: {
			entries: components["schemas"]["Entry"][];
		};
		CreationChallengeResponse: Record<string, never>;
		CredentialDetail: {
			/** Format: uuid */
			uuid: string;
			type_: components["schemas"]["CredentialDetailType"];
		};
		CredentialDetailType: OneOf<
			[
				"Password",
				"GeneratedPassword",
				{
					Passkey: string[];
				},
				{
					/** @description totp, webauthn */
					PasswordMfa: Record<string, never>[];
				}
			]
		>;
		CredentialStatus: {
			creds: components["schemas"]["CredentialDetail"][];
		};
		DeleteRequest: {
			filter: components["schemas"]["Filter"];
		};
		Entry: {
			attrs: {
				[key: string]: string[];
			};
		};
		Filter:
			| {
					eq: string[];
			  }
			| {
					cnt: string[];
			  }
			| {
					pres: string;
			  }
			| {
					or: components["schemas"]["Filter"][];
			  }
			| {
					and: components["schemas"]["Filter"][];
			  }
			| {
					andnot: components["schemas"]["Filter"];
			  }
			| "self";
		Group: {
			spn: string;
			uuid: string;
		};
		GroupUnixExtend: {
			/** Format: int32 */
			gidnumber?: number | null;
		};
		IdentifyUserRequest: OneOf<
			[
				"Start",
				{
					SubmitCode: {
						/** Format: int32 */
						other_totp: number;
					};
				},
				"DisplayCode"
			]
		>;
		Modify: OneOf<
			[
				{
					present: string[];
				},
				{
					removed: string[];
				},
				{
					purged: string;
				}
			]
		>;
		ModifyList: {
			mods: components["schemas"]["Modify"][];
		};
		ModifyRequest: {
			filter: components["schemas"]["Filter"];
			modlist: components["schemas"]["ModifyList"];
		};
		OperationError:
			| "sessionexpired"
			| "emptyrequest"
			| "backend"
			| "nomatchingentries"
			| "nomatchingattributes"
			| {
					/** Format: int64 */
					corruptedentry: number;
			  }
			| {
					corruptedindex: string;
			  }
			| {
					consistencyerror: components["schemas"]["Result"][];
			  }
			| {
					schemaviolation: components["schemas"]["SchemaError"];
			  }
			| {
					plugin: components["schemas"]["PluginError"];
			  }
			| "filtergeneration"
			| "filteruuidresolution"
			| {
					invalidattributename: string;
			  }
			| {
					invalidattribute: string;
			  }
			| "invaliddbstate"
			| "invalidcachestate"
			| "invalidvaluestate"
			| "invalidentryid"
			| "invalidrequeststate"
			| "invalidsyncstate"
			| "invalidstate"
			| "invalidentrystate"
			| "invaliduuid"
			| "invalidreplchangeid"
			| {
					invalidacpstate: string;
			  }
			| {
					invalidschemastate: string;
			  }
			| {
					invalidaccountstate: string;
			  }
			| "missingentries"
			| "modifyassertionfailed"
			| "backendengine"
			| "sqliteerror"
			| "fserror"
			| "serdejsonerror"
			| "serdecborerror"
			| "accessdenied"
			| "notauthenticated"
			| "notauthorised"
			| {
					invalidauthstate: string;
			  }
			| "invalidsessionstate"
			| "systemprotectedobject"
			| "systemprotectedattribute"
			| {
					passwordquality: components["schemas"]["PasswordFeedback"][];
			  }
			| "cryptographyerror"
			| "resourcelimit"
			| "queuedisconnected"
			| "webauthn"
			| {
					/** Format: date-time */
					wait: string;
			  }
			| "replreplayfailure"
			| "replentrynotchanged"
			| "replinvalidruvstate"
			| "repldomainlevelunsatisfiable"
			| "repldomainuuidmismatch"
			| "replserveruuidsplitdatastate"
			| "transactionalreadycommitted"
			| {
					/**
					 * Format: int32
					 * @description when you ask for a gid that's lower than a safe minimum
					 */
					gidoverlapssystemmin: number;
			  }
			| "valuedenyname"
			| "cu0001webauthnattestationnottrusted"
			| "cu0002webauthnregistrationerror"
			| "vs0001incomingreplsshpublickey"
			| "vl0001valuesshpublickeystring"
			| "sc0001incomingsshpublickey"
			| "mg0001invalidremigrationlevel"
			| "mg0002raisedomainlevelexceedsmaximum"
			| "mg0003serverphaseinvalidformigration";
		PasskeyDetail: {
			/** Format: uuid */
			uuid: string;
			tag: string;
		};
		PasswordFeedback:
			| "useafewwordsavoidcommonphrases"
			| "noneedforsymbolsdigitsoruppercaseletters"
			| "addanotherwordortwo"
			| "capitalizationdoesnthelpverymuch"
			| "alluppercaseisalmostaseasytoguessasalllowercase"
			| "reversedwordsarentmuchhardertoguess"
			| "predictablesubstitutionsdonthelpverymuch"
			| "usealongerkeyboardpatternwithmoreturns"
			| "avoidrepeatedwordsandcharacters"
			| "avoidsequences"
			| "avoidrecentyears"
			| "avoidyearsthatareassociatedwithyou"
			| "avoiddatesandyearsthatareassociatedwithyou"
			| "straightrowsofkeysareeasytoguess"
			| "shortkeyboardpatternsareeasytoguess"
			| "repeatslikeaaaareeasytoguess"
			| "repeatslikeabcabcareonlyslightlyhardertoguess"
			| "thisisatop10password"
			| "thisisatop100password"
			| "thisisacommonpassword"
			| "thisissimilartoacommonlyusedpassword"
			| "sequenceslikeabcareeasytoguess"
			| "recentyearsareeasytoguess"
			| "awordbyitselfiseasytoguess"
			| "datesareofteneasytoguess"
			| "namesandsurnamesbythemselvesareeasytoguess"
			| "commonnamesandsurnamesareeasytoguess"
			| {
					/** Format: int32 */
					tooshort: number;
			  }
			| "badlisted"
			| "dontreusepasswords";
		PluginError: OneOf<
			[
				{
					attrunique: string;
				},
				{
					base: string;
				},
				{
					referentialintegrity: string;
				},
				{
					credimport: string;
				},
				"oauth2secrets"
			]
		>;
		/** @description Placeholder until we can handle a BTree in utipa */
		ProtoEntry: Record<string, never>;
		PublicKeyCredential: Record<string, never>;
		RadiusAuthToken: {
			name: string;
			displayname: string;
			uuid: string;
			secret: string;
			groups: components["schemas"]["Group"][];
		};
		RequestChallengeResponse: Record<string, never>;
		Result: Record<string, never>;
		SchemaError:
			| "notimplemented"
			| "noclassfound"
			| {
					invalidclass: string[];
			  }
			| {
					missingmustattribute: string[];
			  }
			| {
					invalidattribute: string;
			  }
			| {
					invalidattributesyntax: string;
			  }
			| {
					attributenotvalidforclass: string;
			  }
			| {
					supplementsnotsatisfied: string[];
			  }
			| {
					excludesnotsatisfied: string[];
			  }
			| "emptyfilter"
			| "corrupted"
			| {
					phantomattribute: string;
			  };
		ScimEntry: Record<string, never>;
		ScimSyncRequest: {
			from_state: components["schemas"]["ScimSyncState"];
			to_state: components["schemas"]["ScimSyncState"];
			entries: components["schemas"]["ScimEntry"][];
			retain: components["schemas"]["ScimSyncRetentionMode"];
		};
		ScimSyncRetentionMode: OneOf<
			[
				"Ignore",
				{
					/**
					 * @description All entries that have their uuid present in this set are retained.
					 * Anything not present will be deleted.
					 */
					Retain: string[];
				},
				{
					/**
					 * @description Any entry with it's uuid in this set will be deleted. Anything not
					 * present will be retained.
					 */
					Delete: string[];
				}
			]
		>;
		ScimSyncState: OneOf<
			[
				"Refresh",
				{
					Active: {
						cookie: components["schemas"]["Base64UrlSafeData"];
					};
				}
			]
		>;
		SearchRequest: {
			filter: components["schemas"]["Filter"];
		};
		SearchResponse: {
			entries: components["schemas"]["Entry"][];
		};
		SingleStringRequest: {
			value: string;
		};
		/** @enum {string} */
		TotpAlgo: "sha1" | "sha256" | "sha512";
		TotpSecret: {
			accountname: string;
			/** @description User-facing name of the system, issuer of the TOTP */
			issuer: string;
			/** Format: binary */
			secret: string;
			algo: components["schemas"]["TotpAlgo"];
			/** Format: int64 */
			step: number;
			/** Format: int32 */
			digits: number;
		};
		UatPurpose: OneOf<
			[
				"readonly",
				{
					readwrite: {
						/**
						 * Format: date-time
						 * @description If none, there is no expiry, and this is always rw. If there is
						 * an expiry, check that the current time < expiry.
						 */
						expiry?: string | null;
					};
				}
			]
		>;
		/** @enum {string} */
		UatPurposeStatus: "readonly" | "readwrite" | "privilegecapable";
		UatStatus: {
			/** Format: uuid */
			account_id: string;
			/** Format: uuid */
			session_id: string;
			state: components["schemas"]["UatStatusState"];
			/** Format: date-time */
			issued_at: string;
			purpose: components["schemas"]["UatPurposeStatus"];
		};
		UatStatusState: OneOf<
			[
				{
					/** Format: date-time */
					expiresat: string;
				},
				"neverexpires",
				"revoked"
			]
		>;
		UnixGroupToken: {
			name: string;
			spn: string;
			/** Format: uuid */
			uuid: string;
			/** Format: int32 */
			gidnumber: number;
		};
		UnixUserToken: {
			name: string;
			spn: string;
			displayname: string;
			/** Format: int32 */
			gidnumber: number;
			/** Format: uuid */
			uuid: string;
			shell?: string | null;
			groups: components["schemas"]["UnixGroupToken"][];
			sshkeys: string[];
			valid?: boolean;
		};
		/**
		 * @description The currently authenticated user, and any required metadata for them
		 * to properly authorise them. This is similar in nature to oauth and the krb
		 * PAC/PAD structures. This information is transparent to clients and CAN
		 * be parsed by them!
		 *
		 * This structure and how it works will *very much* change over time from this
		 * point onward! This means on updates, that sessions will invalidate in many
		 * cases.
		 */
		UserAuthToken: {
			/** Format: uuid */
			session_id: string;
			/** Format: date-time */
			issued_at: string;
			/**
			 * Format: date-time
			 * @description If none, there is no expiry, and this is always valid. If there is
			 * an expiry, check that the current time < expiry.
			 */
			expiry?: string | null;
			purpose: components["schemas"]["UatPurpose"];
			/** Format: uuid */
			uuid: string;
			displayname: string;
			spn: string;
			mail_primary?: string | null;
			ui_hints: components["schemas"]["UiHint"][];
		};
		/** @description The web app's top level error type, this takes an `OperationError` and converts it into a HTTP response. */
		WebError: OneOf<
			[
				{
					OperationError: components["schemas"]["OperationError"];
				},
				{
					InternalServerError: string;
				}
			]
		>;
		WhoamiResponse: {
			youare: components["schemas"]["Entry"];
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
	robots_txt: {
		responses: {
			/** @description Ok */
			200: {
				content: never;
			};
		};
	};
	scim_sync_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	scim_sync_post: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["ScimSyncRequest"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Status endpoint used for health checks, returns true when the server is up.
	 * @description Status endpoint used for health checks, returns true when the server is up.
	 */
	status: {
		responses: {
			/** @description Ok */
			200: {
				content: never;
			};
		};
	};
	/**
	 * This returns the image for the OAuth2 Resource Server if the user has permissions
	 * @description This returns the image for the OAuth2 Resource Server if the user has permissions
	 */
	oauth2_image_get: {
		parameters: {
			path: {
				rs_name: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/octet-stream": string;
				};
			};
			/** @description Authorization refused */
			403: {
				content: never;
			};
		};
	};
	account_id_radius_token_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	account_id_radius_token_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/** @deprecated */
	account_id_ssh_pubkeys_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	account_id_ssh_pubkeys_tag_get: {
		parameters: {
			path: {
				id: string;
				tag: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Expects an `AccountUnixExtend` object
	 * @description Expects an `AccountUnixExtend` object
	 */
	account_id_unix_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AccountUnixExtend"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	account_id_unix_auth_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SingleStringRequest"];
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	account_id_unix_token: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	account_id_user_auth_token_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	account_user_auth_token_delete: {
		parameters: {
			path: {
				id: string;
				token_id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	auth: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["AuthRequest"];
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	auth_valid: {
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	credential_update_cancel: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["CUSessionToken"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	credential_update_commit: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["CUSessionToken"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	credential_update_exchange_intent: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["CUIntentToken"];
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	credential_update_status: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["CUSessionToken"];
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	credential_update_update: {
		requestBody: {
			content: {
				"application/json": unknown[];
			};
		};
		responses: {
			200: {
				content: {
					"application/json": components["schemas"]["CUStatus"];
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	debug_ipinfo: {
		responses: {
			/** @description Ok */
			200: {
				content: never;
			};
		};
	};
	domain_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	domain_attr_get: {
		parameters: {
			path: {
				attr: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	domain_attr_put: {
		parameters: {
			path: {
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	domain_attr_delete: {
		parameters: {
			path: {
				attr: string;
			};
		};
		requestBody?: {
			content: {
				"application/json": string[] | null;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Returns all groups visible  to the user
	 * @description Returns all groups visible  to the user
	 */
	group_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_id_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_id_delete: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_id_attr_get: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_id_attr_put: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_id_attr_post: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_id_attr_delete: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		requestBody?: {
			content: {
				"application/json": string[] | null;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_id_unix_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["GroupUnixExtend"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	group_id_unix_token_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	logout: {
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Lists all the OAuth2 Resource Servers
	 * @description Lists all the OAuth2 Resource Servers
	 */
	oauth2_get: {
		responses: {
			200: {
				content: {
					"application/json": components["schemas"]["ProtoEntry"][];
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	oauth2_public_post: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	oauth2_basic_post: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Get the details of a given OAuth2 Resource Server.
	 * @description Get the details of a given OAuth2 Resource Server.
	 */
	oauth2_id_get: {
		parameters: {
			path: {
				rs_name: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Delete an OAuth2 Resource Server
	 * @description Delete an OAuth2 Resource Server
	 */
	oauth2_id_delete: {
		parameters: {
			path: {
				rs_name: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
			404: {
				content: never;
			};
		};
	};
	/**
	 * Modify an OAuth2 Resource Server
	 * @description Modify an OAuth2 Resource Server
	 */
	oauth2_id_patch: {
		parameters: {
			path: {
				rs_name: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Get the basic secret for a given OAuth2 Resource Server. This is used for authentication.
	 * @description Get the basic secret for a given OAuth2 Resource Server. This is used for authentication.
	 */
	oauth2_id_get_basic_secret: {
		parameters: {
			path: {
				rs_name: string;
			};
		};
		responses: {
			200: {
				content: {
					"application/json": string | null;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * API endpoint for creating/replacing the image associated with an OAuth2 Resource Server.
	 * @description API endpoint for creating/replacing the image associated with an OAuth2 Resource Server.
	 *
	 * It requires a multipart form with the image file, and the content type must be one of the
	 * [VALID_IMAGE_UPLOAD_CONTENT_TYPES].
	 */
	oauth2_id_image_post: {
		parameters: {
			path: {
				rs_name: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	oauth2_id_image_delete: {
		parameters: {
			path: {
				rs_name: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	oauth2_id_scopemap_delete: {
		parameters: {
			path: {
				rs_name: string;
				group: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Modify the scope map for a given OAuth2 Resource Server
	 * @description Modify the scope map for a given OAuth2 Resource Server
	 */
	oauth2_id_scopemap_post: {
		parameters: {
			path: {
				rs_name: string;
				group: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Create a supplemental scope map for a given OAuth2 Resource Server
	 * @description Create a supplemental scope map for a given OAuth2 Resource Server
	 */
	oauth2_id_sup_scopemap_post: {
		parameters: {
			path: {
				rs_name: string;
				group: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	oauth2_id_sup_scopemap_delete: {
		parameters: {
			path: {
				rs_name: string;
				group: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Expects the following fields in the attrs field of the req: [name, displayname]
	 * @description Expects the following fields in the attrs field of the req: [name, displayname]
	 */
	person_post: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_delete: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_patch: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_get_attr: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Authorzation refused */
			403: {
				content: never;
			};
		};
	};
	person_id_put_attr: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_post_attr: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_delete_attr: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_get_id_credential_status: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_credential_update_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_credential_update_intent_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_credential_update_intent_ttl_get: {
		parameters: {
			path: {
				/** @description The new TTL for the credential? */
				ttl: number;
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_identify_user_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["IdentifyUserRequest"];
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Get and return a single str
	 * @description Get and return a single str
	 */
	person_id_radius_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_radius_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_radius_delete: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_radius_token_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_ssh_pubkeys_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_ssh_pubkeys_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": (string & string)[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_ssh_pubkeys_tag_get: {
		parameters: {
			path: {
				id: string;
				tag: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_ssh_pubkeys_tag_delete: {
		parameters: {
			path: {
				/** @description The tag of the SSH key */
				tag: string;
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_unix_credential_put: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["SingleStringRequest"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	person_id_unix_credential_delete: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Raw request to the system, be warned this can be dangerous!
	 * @description Raw request to the system, be warned this can be dangerous!
	 */
	raw_create: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["CreateRequest"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Raw request to the system, be warned this can be dangerous!
	 * @description Raw request to the system, be warned this can be dangerous!
	 */
	raw_delete: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteRequest"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Raw request to the system, be warned this can be dangerous!
	 * @description Raw request to the system, be warned this can be dangerous!
	 */
	raw_modify: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["ModifyRequest"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Raw request to the system, be warned this can be dangerous!
	 * @description Raw request to the system, be warned this can be dangerous!
	 */
	raw_search: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["SearchRequest"];
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	reauth: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["AuthIssueSession"];
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	recycle_bin_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	recycle_bin_id_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	recycle_bin_revive_id_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	schema_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	schema_attributetype_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	schema_attributetype_get_id: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	schema_classtype_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	schema_classtype_get_id: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	whoami: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Returns your OAuth2 app links for the Web UI
	 * @description Returns your OAuth2 app links for the Web UI
	 */
	applinks_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	whoami_uat: {
		responses: {
			/** @description Ok */
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_post: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_delete: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_patch: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_get_attr: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_put_attr: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_post_attr: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_delete_attr: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_credential_generate: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_credential_status_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Due to how the migrations work in 6 -> 7, we can accidentally
	 * @deprecated
	 * @description Due to how the migrations work in 6 -> 7, we can accidentally
	 * mark "accounts" as service accounts when they are persons. This
	 * allows migrating them to the person type due to its similarities.
	 *
	 * In the future this will be REMOVED!
	 */
	service_account_into_person: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_api_token_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_api_token_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ApiTokenGenerate"];
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_api_token_delete: {
		parameters: {
			path: {
				id: string;
				token_id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_ssh_pubkeys_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_ssh_pubkeys_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": (string & string)[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_ssh_pubkeys_tag_get: {
		parameters: {
			path: {
				id: string;
				tag: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_ssh_pubkeys_tag_delete: {
		parameters: {
			path: {
				/** @description The tag of the SSH key */
				tag: string;
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	service_account_id_unix_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AccountUnixExtend"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Get all? the sync accounts.
	 * @description Get all? the sync accounts.
	 */
	sync_account_get: {
		responses: {
			200: {
				content: {
					"application/json": components["schemas"]["ProtoEntry"][];
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	sync_account_post: {
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Get the details of a sync account
	 * @description Get the details of a sync account
	 */
	sync_account_id_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			200: {
				content: {
					"application/json": components["schemas"]["ProtoEntry"] | null;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	/**
	 * Modify a sync account in-place
	 * @description Modify a sync account in-place
	 */
	sync_account_id_patch: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["ProtoEntry"];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	sync_account_id_attr_get: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	sync_account_id_attr_put: {
		parameters: {
			path: {
				id: string;
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	sync_account_id_finalise_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	sync_account_token_post: {
		parameters: {
			path: {
				id: string;
			};
		};
		requestBody: {
			content: {
				"text/plain": string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	sync_account_token_delete: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	sync_account_id_terminate_get: {
		parameters: {
			path: {
				id: string;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	system_get: {
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	system_attr_get: {
		parameters: {
			path: {
				attr: string;
			};
		};
		responses: {
			200: {
				content: never;
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	system_attr_put: {
		parameters: {
			path: {
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	system_attr_post: {
		parameters: {
			path: {
				attr: string;
			};
		};
		requestBody: {
			content: {
				"application/json": string[];
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
	system_attr_delete: {
		parameters: {
			path: {
				attr: string;
			};
		};
		requestBody?: {
			content: {
				"application/json": string[] | null;
			};
		};
		responses: {
			/** @description Ok */
			200: {
				content: {
					"application/json": Record<string, never>;
				};
			};
			/** @description Invalid Request */
			400: {
				content: never;
			};
			/** @description Authorization required */
			401: {
				content: never;
			};
			/** @description Not Authorized */
			403: {
				content: never;
			};
		};
	};
}
